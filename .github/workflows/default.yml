name: default

on: [push, pull_request]

jobs:

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: "pip"
        cache-dependency-path: |
          setup.py
          requirements/lint.txt
    - name: Install dependencies
      env:
        REQUIREMENTS_FILE: lint
      run: |
        python -m pip install -U pip setuptools wheel
        if [ -n "$GITHUB_HEAD_REF" ]; then
          export GHBRANCH="${GITHUB_HEAD_REF#refs/heads/}"
        else
          export GHBRANCH="${GITHUB_REF#refs/heads/}"
        fi
        # Use the same branch (if exists) for the backend.ai-cli installation
        set +e
        git ls-remote --heads 'https://github.com/lablup/backend.ai-cli' | grep -q "refs/heads/${GHBRANCH}"
        if [ $? -eq 0 ]; then
          sed -i "s%\(backend.ai-cli\)@main%\1@${GHBRANCH}%" requirements/${REQUIREMENTS_FILE}.txt
        fi
        set -e
        python -m pip install -U -r requirements/${REQUIREMENTS_FILE}.txt
    - name: Lint with flake8
      run: |
        if [ "$GITHUB_EVENT_NAME" == "pull_request" -a -n "$GITHUB_HEAD_REF" ]; then
          echo "(skipping matchers for pull request from local branches)"
        else
          echo "::add-matcher::.github/workflows/flake8-matcher.json"
        fi
        python -m flake8 src/ai/backend tests scripts setup*.py

  typecheck:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: "pip"
        cache-dependency-path: |
          setup.py
          requirements/typecheck.txt
    - name: Install dependencies
      env:
        REQUIREMENTS_FILE: typecheck
      run: |
        python -m pip install -U pip setuptools wheel
        if [ -n "$GITHUB_HEAD_REF" ]; then
          export GHBRANCH="${GITHUB_HEAD_REF#refs/heads/}"
        else
          export GHBRANCH="${GITHUB_REF#refs/heads/}"
        fi
        # Use the same branch (if exists) for the backend.ai-cli installation
        set +e
        git ls-remote --heads 'https://github.com/lablup/backend.ai-cli' | grep -q "refs/heads/${GHBRANCH}"
        if [ $? -eq 0 ]; then
          sed -i "s%\(backend.ai-cli\)@main%\1@${GHBRANCH}%" requirements/${REQUIREMENTS_FILE}.txt
        fi
        set -e
        python -m pip install -U -r requirements/${REQUIREMENTS_FILE}.txt
    - name: Type check with mypy
      run: |
        if [ "$GITHUB_EVENT_NAME" == "pull_request" -a -n "$GITHUB_HEAD_REF" ]; then
          echo "(skipping matchers for pull request from local branches)"
        else
          echo "::add-matcher::.github/workflows/mypy-matcher.json"
        fi
        python -m mypy --no-color-output src/ai/backend scripts setup*.py

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10"]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: "pip"
        cache-dependency-path: |
          setup.py
          requirements/test.txt
    - name: Install dependencies
      env:
        REQUIREMENTS_FILE: test
      run: |
        python -m pip install -U pip setuptools wheel
        if [ -n "$GITHUB_HEAD_REF" ]; then
          export GHBRANCH="${GITHUB_HEAD_REF#refs/heads/}"
        else
          export GHBRANCH="${GITHUB_REF#refs/heads/}"
        fi
        echo "HEAD: ${GHBRANCH} (${GITHUB_REF}, ${GITHUB_HEAD_REF})"
        # Use the same branch (if exists) for the backend.ai-cli installation
        set +e
        git ls-remote --heads 'https://github.com/lablup/backend.ai-cli' | grep -q "refs/heads/${GHBRANCH}"
        if [ $? -eq 0 ]; then
          sed -i.bak "s%\(backend.ai-cli\)@main%\1@${GHBRANCH}%" requirements/${REQUIREMENTS_FILE}.txt
        fi
        set -e
        python -m pip install -U -r requirements/${REQUIREMENTS_FILE}.txt
        python <<EOF
        # temporary patch until pnuckowski/aioresponses#174 is released or aiohttp is patched.
        from pathlib import Path
        import aioresponses
        p = (Path(aioresponses.__file__).parent / "compat.py")
        print(">>> Patching aioresponses #174 manually")
        t = p.read_text()
        t = t.replace("return StreamReader(protocol, loop=loop)", "return StreamReader(protocol, limit=2 ** 16, loop=loop)")
        p.write_text(t)
        EOF
      shell: bash
    - name: Test with pytest
      run: |
        python -m pytest -v --cov=src -m 'not integration' tests
    - name: Send code coverage report
      uses: codecov/codecov-action@v1

  deploy-to-pypi:
    needs: [lint, typecheck, test]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        cache: "pip"
        cache-dependency-path: |
          setup.py
          requirements/build.txt
    - name: Install dependencies
      env:
        REQUIREMENTS_FILE: build
      run: |
        python -m pip install -U pip setuptools wheel
        python -m pip install -U -r requirements/build.txt
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
